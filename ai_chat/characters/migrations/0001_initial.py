# Generated by Django 5.0.4 on 2025-03-15 18:34

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='character_avatars/')),
                ('description', models.TextField(help_text='Brief description of the character')),
                ('background_story', models.TextField(blank=True, help_text="Character's backstory")),
                ('traits', models.JSONField(blank=True, default=list, help_text='List of character traits as JSON')),
                ('personality_details', models.JSONField(blank=True, default=dict, help_text='Detailed personality aspects as JSON')),
                ('voice', models.TextField(blank=True, help_text="Description of the character's voice and speech patterns")),
                ('vector_id', models.CharField(blank=True, help_text='Reference ID in the vector database', max_length=100)),
                ('creation_token_cost', models.IntegerField(default=0, help_text='Tokens used during character creation')),
                ('avg_interaction_tokens', models.FloatField(default=0, help_text='Average tokens per interaction')),
                ('total_interactions', models.IntegerField(default=0, help_text='Number of interactions with this character')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_interaction', models.DateTimeField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-last_interaction', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CharacterMemory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='The memory content')),
                ('source', models.CharField(help_text='Where this memory came from (conversation, story, etc.)', max_length=100)),
                ('vector_id', models.CharField(blank=True, help_text='Reference ID in the vector database', max_length=100)),
                ('embedding', models.JSONField(blank=True, help_text='Optional local storage of embedding vector', null=True)),
                ('importance_score', models.FloatField(default=0.5, help_text='How important this memory is (0-1)')),
                ('is_active', models.BooleanField(default=True, help_text="Whether this memory is active in the character's memory")),
                ('token_count', models.IntegerField(default=0, help_text='Number of tokens in this memory')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(help_text='Type of relationship (friend, enemy, etc.)', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of the relationship')),
                ('strength', models.FloatField(default=0.5, help_text='Strength of relationship (0-1)')),
                ('feelings', models.JSONField(blank=True, default=dict, help_text='Detailed feelings as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
    ]
