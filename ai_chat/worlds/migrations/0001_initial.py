# Generated by Django 5.0.4 on 2025-03-15 18:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('characters', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='World',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the world')),
                ('genre', models.CharField(blank=True, max_length=100)),
                ('time_period', models.CharField(blank=True, max_length=100)),
                ('rules', models.JSONField(blank=True, default=dict, help_text='Rules of the world as JSON')),
                ('token_usage', models.IntegerField(default=0, help_text='Total tokens used for this world')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='worlds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='WorldLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the location')),
                ('location_type', models.CharField(blank=True, help_text='Type of location (e.g., city, forest, building)', max_length=100)),
                ('coordinates', models.CharField(blank=True, help_text='Coordinates on the world map', max_length=100)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details as JSON')),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='worlds.worldlocation')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='worlds.world')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorldItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the item')),
                ('item_type', models.CharField(blank=True, help_text='Type of item (e.g., weapon, artifact, book)', max_length=100)),
                ('properties', models.TextField(blank=True, help_text='Special properties of the item')),
                ('history', models.TextField(blank=True, help_text='Historical significance of the item')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_items', to='characters.character')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='worlds.world')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='worlds.worldlocation')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorldFaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the faction')),
                ('faction_type', models.CharField(blank=True, help_text='Type of faction (e.g., government, guild, religion)', max_length=100)),
                ('leader', models.CharField(blank=True, help_text='Name of the faction leader', max_length=200)),
                ('goals', models.TextField(blank=True, help_text='Goals and motivations of the faction')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details as JSON')),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='factions', to='worlds.world')),
                ('headquarters', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headquartered_factions', to='worlds.worldlocation')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorldEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the event')),
                ('event_type', models.CharField(blank=True, help_text='Type of event (e.g., war, coronation, disaster)', max_length=100)),
                ('start_date', models.CharField(blank=True, help_text='When the event started (in-world date)', max_length=100)),
                ('end_date', models.CharField(blank=True, help_text='When the event ended (in-world date)', max_length=100)),
                ('significance', models.TextField(blank=True, help_text='Significance and impact of the event')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='worlds.world')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='worlds.worldlocation')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorldCulture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the culture')),
                ('values', models.TextField(blank=True, help_text='Core values of the culture')),
                ('traditions', models.TextField(blank=True, help_text='Important traditions and customs')),
                ('language', models.CharField(blank=True, help_text='Primary language', max_length=100)),
                ('religion', models.TextField(blank=True, help_text='Religious beliefs')),
                ('notable_figures', models.TextField(blank=True, help_text='Important figures in this culture')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cultures', to='worlds.world')),
                ('locations', models.ManyToManyField(blank=True, related_name='cultures', to='worlds.worldlocation')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorldNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(blank=True)),
                ('note_type', models.CharField(choices=[('general', 'General Note'), ('lore', 'Lore'), ('technology', 'Technology'), ('magic', 'Magic System'), ('creatures', 'Creatures'), ('politics', 'Politics'), ('economy', 'Economy'), ('religion', 'Religion'), ('other', 'Other')], default='general', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='worlds.world')),
            ],
            options={
                'verbose_name_plural': 'World Notes',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='FactionMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('leader', 'Leader'), ('officer', 'Officer'), ('member', 'Member'), ('recruit', 'Recruit'), ('ally', 'Ally'), ('spy', 'Spy'), ('former', 'Former Member'), ('other', 'Other')], default='member', max_length=20)),
                ('notes', models.TextField(blank=True, help_text="Notes about the character's role in this faction")),
                ('joined_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faction_memberships', to='characters.character')),
                ('faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='worlds.worldfaction')),
            ],
            options={
                'unique_together': {('faction', 'character')},
            },
        ),
        migrations.CreateModel(
            name='WorldLocationCharacter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('association_type', models.CharField(choices=[('resident', 'Resident'), ('visitor', 'Visitor'), ('ruler', 'Ruler'), ('worker', 'Worker'), ('imprisoned', 'Imprisoned'), ('historical', 'Historical Connection'), ('other', 'Other')], default='resident', max_length=20)),
                ('notes', models.TextField(blank=True, help_text="Notes about the character's association with this location")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_associations', to='characters.character')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='character_associations', to='worlds.worldlocation')),
            ],
            options={
                'unique_together': {('location', 'character')},
            },
        ),
    ]
